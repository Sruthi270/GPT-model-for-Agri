[
    {
        "label": "deep_translator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "deep_translator",
        "description": "deep_translator",
        "detail": "deep_translator",
        "documentation": {}
    },
    {
        "label": "GoogleTranslator",
        "importPath": "deep_translator",
        "description": "deep_translator",
        "isExtraImport": true,
        "detail": "deep_translator",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "session_state",
        "importPath": "streamlit",
        "description": "streamlit",
        "isExtraImport": true,
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "st_audiorec",
        "importPath": "st_audiorec",
        "description": "st_audiorec",
        "isExtraImport": true,
        "detail": "st_audiorec",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "AudioSegment",
        "importPath": "pydub",
        "description": "pydub",
        "isExtraImport": true,
        "detail": "pydub",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "agriculture_specialist",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def agriculture_specialist(question):\n    try:\n        client = OpenAI(\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n        )\n        prompt = f\"\"\"\n            Welcome to the AI Agriculture Specialist! ðŸŒ± I'm here to provide expert advice and guidance on all things related to agriculture. Whether you're a seasoned farmer or just starting out, I'm here to help you navigate the complexities of agricultural practices.\n            Question: {question}\n            \"\"\"\n        messages = [{\"role\": \"system\", \"content\": prompt}]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "tamil_response",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def tamil_response(sentence):\n    try:\n        client = OpenAI(\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n        )\n        prompt = f\"\"\"\n            You are a helpful AI assistant capable of translating English to Tamil using the Roman script. Your task is to translate the provided English sentence to Tamil using the Roman script. Make sure to provide translations using English letters that correspond to Tamil sounds.\n            Example:\n            English: \"Hello, how are you?\"\n            Tamil (Roman script): \"Vanakkam, eppadi irukkinga?\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def signup(json_file_path=\"data.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)\n        sex = st.radio(\"Sex:\", (\"Male\", \"Female\", \"Other\"))\n        password = st.text_input(\"Password:\", type=\"password\")\n        confirm_password = st.text_input(\"Confirm Password:\", type=\"password\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def check_login(username, password, json_file_path=\"data.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n        for user in data[\"users\"]:\n            if user[\"email\"] == username and user[\"password\"] == password:\n                session_state[\"logged_in\"] = True\n                session_state[\"user_info\"] = user\n                st.success(\"Login successful!\")\n                return user",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def initialize_database(json_file_path=\"data.json\"):\n    try:\n        if not os.path.exists(json_file_path):\n            data = {\"users\": []}\n            with open(json_file_path, \"w\") as json_file:\n                json.dump(data, json_file)\n    except Exception as e:\n        print(f\"Error initializing database: {e}\")\ndef create_account(\n    name,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_account(\n    name,\n    email,\n    age,\n    sex,\n    password,\n    json_file_path=\"data.json\",\n):\n    try:\n        # Check if the JSON file exists or is empty",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login(json_file_path=\"data.json\"):\n    st.title(\"Login Page\")\n    username = st.text_input(\"Email:\")\n    password = st.text_input(\"Password:\", type=\"password\")\n    login_button = st.button(\"Login\")\n    if login_button:\n        user = check_login(username, password, json_file_path)\n        if user is not None:\n            session_state[\"logged_in\"] = True\n            session_state[\"user_info\"] = user",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_user_info(email, json_file_path=\"data.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n            for user in data[\"users\"]:\n                if user[\"email\"] == email:\n                    return user\n        return None\n    except Exception as e:\n        st.error(f\"Error getting user information: {e}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_audio_data",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_audio_data(wav_audio_data):\n    audio_segment = AudioSegment.from_wav(io.BytesIO(wav_audio_data))\n    mp3_data = io.BytesIO()\n    audio_segment.export(mp3_data, format=\"mp3\")\n    return mp3_data.getvalue()\ndef render_dashboard(user_info, json_file_path=\"data.json\"):\n    try:\n        # add profile picture\n        st.title(f\"Welcome to the Dashboard, {user_info['name']}!\")\n        st.subheader(\"User Information:\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "render_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def render_dashboard(user_info, json_file_path=\"data.json\"):\n    try:\n        # add profile picture\n        st.title(f\"Welcome to the Dashboard, {user_info['name']}!\")\n        st.subheader(\"User Information:\")\n        st.write(f\"Name: {user_info['name']}\")\n        st.write(f\"Sex: {user_info['sex']}\")\n        st.write(f\"Age: {user_info['age']}\")\n    except Exception as e:\n        st.error(f\"Error rendering dashboard: {e}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main(json_file_path=\"data.json\"):\n    st.sidebar.title(\"Smart Business Assistant\")\n    page = st.sidebar.radio(\n        \"Go to\",\n        (\n            \"Signup/Login\",\n            \"Dashboard\",\n            \"Get Agriculture Information\",\n        ),\n        key=\"pages\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "session_state",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "session_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\nload_dotenv()\ndef agriculture_specialist(question):\n    try:\n        client = OpenAI(\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n        )\n        prompt = f\"\"\"",
        "detail": "app",
        "documentation": {}
    }
]